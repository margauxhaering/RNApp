"ENSG00000196517",
"ENSG00000131914",
"ENSG00000168907",
"ENSG00000164756",
"ENSG00000124782",
"ENSG00000152147",
"ENSG00000004455",
"ENSG00000165695")
gost(geneset,
organism = "hsapiens",
ordered_query = T,
measure_underrepresentation = TRUE,
user_threshold = 0.05,
correction_method = "fdr",
domain_scope = "known",
numeric_ns = ENSG,
sources = c("GO:CC","GO:BP", "GO:MF","KEGG", "WP"))
?gost
gost(geneset,
organism = "hsapiens",
ordered_query = T,
measure_underrepresentation = TRUE,
user_threshold = 0.05,
correction_method = "fdr",
domain_scope = "known",
numeric_ns = "ENSG",
sources = c("GO:CC","GO:BP", "GO:MF","KEGG", "WP"))
gost(geneset,
organism = "hsapiens",
ordered_query = T,
measure_underrepresentation = T,
user_threshold = 0.05,
correction_method = "fdr",
domain_scope = "known",
numeric_ns = "ENSG",
sources = c("GO:CC","GO:BP", "GO:MF","KEGG", "WP"))
gost(geneset, organism = "hsapiens",ordered_query = T,measure_underrepresentation = T,user_threshold = 0.05,correction_method = "fdr",domain_scope = "known", numeric_ns = "ENSG", sources = c("GO:CC","GO:BP", "GO:MF","KEGG", "WP"))
gost(geneset, organism = "hsapiens",ordered_query = T,measure_underrepresentation = T,user_threshold = 0.05,correction_method = "fdr",domain_scope = "known", sources = c("GO:CC","GO:BP", "GO:MF","KEGG", "WP"))
gost(geneset, organism = "hsapiens",ordered_query = T,measure_underrepresentation = T,user_threshold = 0.05,correction_method = "fdr",domain_scope = "known", sources = c("GO:CC","GO:BP", "GO:MF","KEGG", "WP"), significant = F)
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
geneset <- c("ENSG00000085224","ENSG00000066468","ENSG00000176884","ENSG00000085832","ENSG00000114867","ENSG00000105426","ENSG00000185728","ENSG00000211764","ENSG00000110881","ENSG00000123815","ENSG00000110693","ENSG00000090339","ENSG00000112685","ENSG00000164690","ENSG00000070367","ENSG00000139219","ENSG00000168461","ENSG00000183454","ENSG00000069696")
res <- gost(geneset, organism = "hsapiens", measure_underrepresentation = T, domain_scope = "known")
res <- gost(geneset, organism = "hsapiens", measure_underrepresentation = T, domain_scope = "known",significant = F)
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?gostplot
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?gconvert
runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
library(edgeR)
library(SummarizedExperiment)
counts <- as.data.frame(read.csv("~/Desktop/data/D2miRNA.csv", header = T, sep = '\t'))
row.names(counts) <- counts[,1]
counts <- counts[,-1]
counts <- counts[rowSums(counts >= 1) > 0 , ]
hierdata <- as.matrix((counts))
# Euclidean distance
dist <- dist(hierdata, diag=TRUE)
# Hierarchical Clustering with hclust
hc <- hclust(dist)
# Plot the result
plot(hc,xlab=NULL, labels = FALSE)
#aide au choix du nb de clusters
inertie <- sort(hc$height, decreasing = TRUE)
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie",lwd=2);grid()
k <- 5
abline(v=k,col="red",lty=3)
points(k,inertie[k],pch=16,cex=2,col="red")
y <- as.matrix((counts))
y <- DGEList(counts = y, group=colnames(counts))
y <- calcNormFactors(y)
z <- cpm(y, normalized.lib.size=TRUE)
library(Mfuzz)
#first get the time point data together:
timepoint <- colnames(counts)
# bind that to the dataframe
test_data <- rbind(timepoint, z)
row.names(test_data)[1]<-"time"
#save it to a temp file so ti doesnt clutter up my blog directory
tmp <- tempfile()
write.table(test_data,file=tmp, sep='\t', quote = F, col.names=NA)
#read it back in as an expression set
data <- table2eset(file=tmp)
data.s <- standardise(data)
m1 <- mestimate(data.s)
Dmin(data.s, m=m1, crange=seq(2,20,1), repeats=3, visu=TRUE)
library(edgeR)
library(SummarizedExperiment)
counts <- as.data.frame(read.csv("~/Desktop/data/D2miRNA.csv", header = T, sep = '\t'))
row.names(counts) <- counts[,1]
counts <- counts[,-1]
counts <- counts[rowSums(counts >= 1) > 0 , ]
hierdata <- as.matrix((counts))
# Euclidean distance
dist <- dist(hierdata, diag=TRUE)
# Hierarchical Clustering with hclust
hc <- hclust(dist)
# Plot the result
plot(hc,xlab=NULL, labels = FALSE)
#aide au choix du nb de clusters
inertie <- sort(hc$height, decreasing = TRUE)
plot(inertie[1:20], type = "s", xlab = "Nombre de classes", ylab = "Inertie",lwd=2);grid()
k <- 5
abline(v=k,col="red",lty=3)
points(k,inertie[k],pch=16,cex=2,col="red")
y <- as.matrix((counts))
y <- DGEList(counts = y, group=colnames(counts))
y <- calcNormFactors(y)
z <- cpm(y, normalized.lib.size=TRUE)
library(Mfuzz)
#first get the time point data together:
timepoint <- colnames(counts)
# bind that to the dataframe
test_data <- rbind(timepoint, z)
row.names(test_data)[1]<-"time"
#save it to a temp file so ti doesnt clutter up my blog directory
tmp <- tempfile()
write.table(test_data,file=tmp, sep='\t', quote = F, col.names=NA)
#read it back in as an expression set
data <- table2eset(file=tmp)
data.s <- standardise(data)
m1 <- mestimate(data.s)
Dmin(data.s, m=m1, crange=seq(2,20,1), repeats=3, visu=TRUE)
clust=k
N_cl<- mfuzz(data.s, c=clust, m = m1)
#observe the size of the clusters
N_cl$size
#take a look to the overlap of clusters (if no overlap even with low threshold or membership value it means they cluster well)
ov <- overlap(N_cl)
Ptmp<- overlap.plot(N_cl,over=ov, thres=0.3)
mfuzz.plot(data.s,cl=N_cl,mfrow=c(4,2),time.labels=c("9AM","12PM","3PM","6PM"),new.window=F)
acore <- acore(data.s,N_cl, min.acore = 0)
aocre
acore
acore$1
acore[1]
acore[1]$NAME
az <- acore[1]
az$NAME
az
az[NAME]
class'az'
class(az)
az['NAME']
az
class(as)
class(az)
az$1
az[1]
az[1]$NAME
az[1][NAME]
az[1]['NAME']
class(acore)
acore
acore[1]
class(acore[1])
sapply(az,"[[", 2 )
sapply(az,"[[", 1 )
as.vector(sapply(az,"[[", 1 ))
?gost
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?plotly
?plot_ly
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
?diff
?t.test
(2.930909-2.938636)/(0.15+0.17)
(2.930909-2.938636)/(0.15)
expr.matrix <-  read.table(file.choose(),sep="\t", header = T, row.names = 1)
expr.matrix
expr.matrix <-  read.table(file.choose(),sep="\t", header = T, row.names = 1)
expr.matrix
sampleGroup <- as.vector(phenoTable$Sample.title)``
sampleGroup <- as.vector(phenoTable$Sample.title)
sampleGroup <- as.vector(expr.matrix$Sample.title)
classescancers<-sort(table(sampleGroup),decreasing = TRUE)
groupe1 <- names(classescancers[1])
groupe2 <- names(classescancers[2])
groupe1
groupe1.expr <- exprTable[, sampleGroup == groupe1]
mean1 = apply(groupe1.expr,1, mean)
exprTable <- read.table(file.path(file.choose(),
exprTable <- read.table(file.choose(),
sep = "\t",
header = TRUE,
quote = "",
row.names = 1)
groupe1.expr <- exprTable[, sampleGroup == groupe1]
exprTable
groupe1
groupe2
classescancers
groupe1.expr <- exprTable[, row.names == groupe1]
groupe1.expr <- exprTable[, row.names(exprTable) == groupe1]
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
require(biomaRt)
BiocManager::install("biomaRt")
require(biomaRt)
mart <- useMart('metazoa_mart', host = 'metazoa.ensembl.org')
mart <- useDataset('amellifera_eg_gene', mart)
annot <- getBM(
mart = mart,
attributes = c(
'entrezgene_id',
'ensembl_gene_id',
'external_gene_name',
'gene_biotype',
'go_id',
'name_1006'),
uniqueRows = TRUE)
annot
?useDataset
data <- c(
"NC_037639.1_7250",
"NC_037640.1_10077",
"NC_037643.1_18247",
"NC_037643.1_16610",
"NC_037643.1_17925",
"NC_037645.1_22065",
"NC_037646.1_23709",
"NC_037649.1_31545",
"NC_037651.1_34155",
"NC_037652.1_36607",
"NC_037638.1_1935",
"NC_037638.1_1821",
"NC_037638.1_2818",
"NC_037638.1_3140",
"NC_037645.1_21238",
"NC_037645.1_23096",
"NC_037648.1_29604",
"NC_037652.1_36442",
"NC_037638.1_2818",
"NC_037639.1_6925",
"NC_037644.1_20437",
"NC_037645.1_22068",
"NC_037648.1_28090",
"NC_037650.1_33006",
"NW_020555885.1_39373",
"ame-miR-1-3p",
"ame-miR-100-5p",
"ame-miR-11-3p",
"ame-miR-125-5p",
"ame-miR-184-3p",
"ame-miR-193-3p",
"ame-miR-252b-5p",
"ame-miR-2765-3p",
"ame-miR-2788-3p",
"ame-miR-279d-3p",
"ame-miR-3477-5p",
"ame-miR-3718c-5p",
"ame-miR-3747b-5p",
"ame-miR-375-3p",
"ame-miR-3758-5p",
"ame-miR-3773-3p",
"ame-miR-3785-3p",
"ame-miR-3786-5p",
"ame-miR-3786-3p",
"ame-miR-6005-5p",
"ame-miR-6038-5p",
"ame-miR-6043-3p",
"ame-miR-6044-5p",
"ame-miR-71-5p",
"ame-miR-750-3p",
"ame-miR-929-5p",
"ame-miR-92b-3p",
"ame-miR-92c-5p",
"ame-miR-92c-3p",
"ame-miR-932-5p",
"ame-miR-9883-5p",
"ame-miR-9886-3p",
"ame-miR-9889-3p",
"ame-miR-9894-3p",
"ame-miR-993-3p",
"ame-miR-137-3p",
"ame-miR-13b-3p",
"ame-miR-190-5p",
"ame-miR-219-5p",
"ame-miR-277-3p",
"ame-miR-281-3p",
"ame-miR-3715-5p",
"ame-miR-3732-3p",
"ame-miR-3743-3p",
"ame-miR-3747a-5p",
"ame-miR-3783-3p",
"ame-miR-3786-3p",
"ame-miR-6005-3p",
"ame-miR-6039-5p",
"ame-miR-6045-5p",
"ame-miR-6047a-3p",
"ame-miR-6047b-3p",
"ame-miR-6048-3p",
"ame-miR-6049-5p",
"ame-miR-6050-5p",
"ame-miR-6051-3p",
"ame-miR-6062-3p",
"ame-miR-6064-5p",
"ame-miR-7-5p",
"ame-miR-87-3p",
"ame-miR-927b-5p",
"ame-miR-92a-3p",
"ame-miR-92c-3p",
"ame-miR-965-5p",
"ame-miR-981-3p",
"ame-miR-9873-3p",
"ame-miR-9882-5p",
"ame-miR-9885-5p",
"ame-miR-993-3p",
"ame-miR-9a-5p",
"ame-bantam-3p",
"ame-miR-1-3p",
"ame-miR-10-5p",
"ame-miR-133-3p",
"ame-miR-13a-3p",
"ame-miR-252b-5p",
"ame-miR-263a-5p",
"ame-miR-263b-5p",
"ame-miR-2944-3p",
"ame-miR-3049-5p",
"ame-miR-305-5p",
"ame-miR-306-5p",
"ame-miR-307-3p",
"ame-miR-31a-5p",
"ame-miR-3478-3p",
"ame-miR-3719-3p",
"ame-miR-3732-3p",
"ame-miR-3743-3p",
"ame-miR-375-3p",
"ame-miR-3759-3p",
"ame-miR-3773-3p",
"ame-miR-3793-5p",
"ame-miR-6000b-3p",
"ame-miR-6005-5p",
"ame-miR-6005-3p",
"ame-miR-6012-3p",
"ame-miR-6042-3p",
"ame-miR-6047a-5p",
"ame-miR-6049-5p",
"ame-miR-6050-5p",
"ame-miR-6052-5p",
"ame-miR-6053-5p",
"ame-miR-6057-5p",
"ame-miR-6058-5p",
"ame-miR-6063-3p",
"ame-miR-7-5p",
"ame-miR-927a-5p",
"ame-miR-927b-5p",
"ame-miR-92c-3p",
"ame-miR-9866-5p",
"ame-miR-9867-5p",
"ame-miR-9871-3p",
"ame-miR-9872-5p",
"ame-miR-9873-3p",
"ame-miR-9878-3p",
"ame-miR-9882-5p",
"ame-miR-9885-5p",
"ame-miR-989-3p",
"ame-miR-9890-5p",
"ame-miR-9892-3p",
"ame-miR-9894-3p",
"ame-miR-993-3p",
"ame-miR-9a-5p")
mart <- useMart('metazoa_mart', host = 'metazoa.ensembl.org')
mart <- useDataset(data, mart)
?listDatasets
`?useMart
''
?useMart
?getBM
annot
?getBM
human = useMart("ensembl", dataset = "amellifera_eg_gene")
?boxplot
dt <- as.data.frame(read.csv(file.choose(), header = T))
dt
dt <- as.data.frame(read.csv(file.choose(), header = T,sep = '\t'))
dt
boxplot(dt)
library(plotly)
?plot_ly
library(plotly)
plot_ly(dt, type = "box")
plot(dt)
?plot
rownames(dt) <- dt[1,]
rownames(dt) <- dt[,1]
dt
boxplot(dt)
dt <- dt[-1,]
dt
dt <- as.data.frame(read.csv(file.choose(), header = T,sep = '\t'))
dt
rownames(dt) <- dt[,1]
dt
dt <- dt[,-1]
dt
boxplot(dt)
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
#load data
dt <- read.table(file.choose(), header=TRUE, row.names =1)
#steps for DESeq2
matrix <- as.matrix(dt)
matrix
# create coldata (i just wrote some random stuff but it's where you define you conditions)
group <- c("9AM","9AM","9AM","12PM","12PM","12PM","3PM","3PM","3PM","6PM","6PM","6PM")
cond <- cbind(c(rep("9AM",3), rep("12PM",3),rep("3PM",3),rep("6PM",3)))
colnames(cond) = c('time')
row.names(cond) = colnames(matrix)
colData = as.data.frame(cond)
design <- formula(as.formula(paste("~", paste(as.data.frame(group)), collapse = "+")))
#DESeq2 main function
dds <- DESeqDataSetFromMatrix(countData=matrix, colData=colData, design=design)
#load libraries for DESeq2
library(stats4)
library(BiocGenerics)
library(parallel)
library(DESeq2)
library(genefilter)
library(calibrate)
library(MASS)
library(RColorBrewer)
library(gplots)
library(S4Vectors)
#DESeq2 main function
dds <- DESeqDataSetFromMatrix(countData=matrix, colData=colData, design=design)
dds <- DESeq(dds)
dds
#print normaized count matrix (you can also do the same with the rlog trasformation as suggested in the DESeq2 vignette)
write.table(counts(dds, normalized=TRUE), 'normalized_counts.txt', sep='\t' ) # normalized counts
shiny::runApp('Desktop/RNApp/App')
runApp()
runApp('Desktop/RNApp/App')
runApp('Desktop/RNApp/App')
shiny::runApp('Desktop/RNApp/App')
